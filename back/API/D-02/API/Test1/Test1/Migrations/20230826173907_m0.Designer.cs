// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test1.Models;

#nullable disable

namespace Test1.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20230826173907_m0")]
    partial class m0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseDepartment", b =>
                {
                    b.Property<int>("CursID")
                        .HasColumnType("int");

                    b.Property<int>("DeptID")
                        .HasColumnType("int");

                    b.HasKey("CursID", "DeptID");

                    b.ToTable("CourseDepartment");
                });

            modelBuilder.Entity("DepartmentsCourse", b =>
                {
                    b.Property<int>("DeptID")
                        .HasColumnType("int");

                    b.Property<int>("CursID")
                        .HasColumnType("int");

                    b.HasKey("DeptID", "CursID");

                    b.HasIndex(new[] { "CursID" }, "IX_DepartmentsCourses_CursID");

                    b.ToTable("DepartmentsCourses", (string)null);
                });

            modelBuilder.Entity("Test1.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Test1.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Test1.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DeptID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("StudentSuper")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentSuper");

                    b.HasIndex(new[] { "DeptID" }, "IX_Students_DeptID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Test1.Models.StudentsCourse", b =>
                {
                    b.Property<int>("StdId")
                        .HasColumnType("int");

                    b.Property<int>("CursID")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("StdId", "CursID");

                    b.HasIndex(new[] { "CursID" }, "IX_StudentsCourses_CursID");

                    b.ToTable("StudentsCourses");
                });

            modelBuilder.Entity("DepartmentsCourse", b =>
                {
                    b.HasOne("Test1.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CursID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test1.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("DeptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test1.Models.Student", b =>
                {
                    b.HasOne("Test1.Models.Department", "Dept")
                        .WithMany("Students")
                        .HasForeignKey("DeptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test1.Models.Student", "StudentSuperNavigation")
                        .WithMany("InverseStudentSuperNavigation")
                        .HasForeignKey("StudentSuper")
                        .HasConstraintName("FK_Students_Students");

                    b.Navigation("Dept");

                    b.Navigation("StudentSuperNavigation");
                });

            modelBuilder.Entity("Test1.Models.StudentsCourse", b =>
                {
                    b.HasOne("Test1.Models.Course", "Curs")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("CursID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test1.Models.Student", "Std")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("StdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curs");

                    b.Navigation("Std");
                });

            modelBuilder.Entity("Test1.Models.Course", b =>
                {
                    b.Navigation("StudentsCourses");
                });

            modelBuilder.Entity("Test1.Models.Department", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Test1.Models.Student", b =>
                {
                    b.Navigation("InverseStudentSuperNavigation");

                    b.Navigation("StudentsCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
